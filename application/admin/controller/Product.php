<?phpnamespace app\admin\controller;use \app\admin\controller;use app\admin\model\Product as ProductModel;use app\admin\model\Productsize;use \app\admin\model\User;use \app\admin\model\Productfactory;use \app\admin\model\Manufacture;use app\admin\model\Userinfo;/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *//** * Description of Index * * @author 27532 */class Product extends Base{    protected $pageTotalItem=40;    public function __construct() {        parent::__construct();        $this->assign('currentMenu',array('menu'=>'menu2','nav'=>'nav0'));    }    //管理员列表    public function index(){        $search=input('request.search','','trim');        $productmodel = new ProductModel();        $modeldata = $productmodel->order('id', 'desc');        if(!empty($search)){            $where=array(                'name' => ['like',"%{$search}%"],                'product_id'=>"{$search}",            );            $modeldata->whereor($where);        }        $data = $modeldata->relation('productsize,productfactroyHas')->paginate($this->pageTotalItem,false,['query' =>request()->param()])->each(                function($items, $key){                    $productFacModel = new Productfactory();                    $userModel = new Userinfo();                    $product_id = $items['id'];                    $items['productfactroy'] = $productFacModel->where('product_id',$product_id)->select();                    $print_fac = array();                    $mac_fac = array();                    if (!empty($items['productfactroy'])) {                        foreach ($items['productfactroy'] as $k => $value) {                            $userinfo_id = $value['factory_id'];                            $info = $userModel->where('user_id', $userinfo_id)->find();                            if (!empty($info['Name'])) {                                if ($value['working_type'] == 1) $print_fac[] = $info;                                if ($value['working_type'] == 2) $mac_fac[] = $info;                            }                        }                        $items['print_fac'] = $print_fac;                        $items['mac_fac'] = $mac_fac;                    } else {                        $items['print_fac'] = array();                        $items['mac_fac'] = array();                        $items['productfactroy'] = array();                    }                });//each给每一项数据加入自定义字段        $this->assign('eventJS','product');        $this->assign('list',$data);        $this->assign('pageDiv', $data->render());        return $this->fetch();    }    public function openwindows(){        $this->view->engine->layout(false);        $search=input('post.search','','trim');        $model=new ProductModel();        $modeldata=$model->order('id', 'desc');        if(!empty($search)){            $where=array(                'name'=>['like',"%{$search}%"],                'product_id'=>"{$search}",            );            $modeldata->whereor($where);        }        $data=$modeldata->select();        $this->assign('list',$data);        return $this->fetch();    }    //删除内容    public function delete(){        $inputs=input();        $ids=$inputs['ids'];        $model=new ProductModel();        foreach($ids as $id){            $data=$model->get($id);            if($data->delete()){                $data->productsize()->delete();            }        }        cache('manumaterial-admin', null);        cache('productdata-admin', null);        echo true;    }    //编辑会员信息    public function edit($id){        $model=new ProductModel();        $data=$model->get($id);        $this->assign('eventJS','product');        $this->assign('data',$data);        return $this->fetch();    }    //补片    public function the_patch($id){        $model = new ProductModel();        $data = $model->get($id);        $this->assign('eventJS','product');        $this->assign('data',$data);        return $this->fetch();    }    //编辑会员信息    public function add(){        $data=array('id'=>'','product_id'=>'','product_num'=>'','name'=>'','smallimg'=>'','Catalog'=>'1','sort'=>'0','display'=>'1','print_subscript'=>'');        $this->assign('data',$data);        $this->assign('eventJS','product');        return $this->fetch('product/edit');    }    //提交数据    public function postProduct(){        $id=input('post.id');        if(!empty($id)){            $product=ProductModel::get($id);        }else{            $product=new ProductModel();        }        $product->product_id=input('post.product_id');        $product->product_num=input('post.product_num');        $product->name=input('post.name');        $product->smallimg=input('post.smallimg');        $product->sort=input('post.sort');        $product->display=input('post.display');        $product->Catalog=input('post.Catalog');        $product->print_subscript=input('post.print_subscript');        if($product->save()!==false){            cache('manumaterial-admin', null);            cache('productdata-admin', null);            echo true;        }else{            dump($product->getError());        }    }    //型号列表    public function size($id){        $productModel = new ProductModel();        $product = $productModel->where('id', $id)->relation('productsize')->find();        $this->assign('data',$product);        $this->assign('eventJS','product');        return $this->fetch();    }    //新增型号    public function addSize($product_id){        $data=array('id'=>'','product_id'=>$product_id,'Size'=>'');        $this->assign('data',$data);        $this->assign('eventJS','product');        return $this->fetch();    }    //修改型号    public function editSize($id){        $data= Productsize::get($id);        $this->assign('data',$data);        $this->assign('eventJS','product');        return $this->fetch('product/add_size');    }    //删除型号    public function deleteSize(){        $ids=explode(",",input('post.id'));        $Product_size=new Productsize();        if($Product_size->where('id','in',$ids)->delete()){            cache('manumaterial-admin', null);            cache('productdata-admin', null);            echo true;        }else{            echo "删除失败，请重新删除！";        }    }    //生产单    public function manufacture($product_id){        $manufacture=new Manufacture();        $data=$manufacture->where('product_id','=',$product_id)->order('id', 'desc')->paginate($this->pageTotalItem);        $this->assign('data',$data);        $this->assign('product_id',$product_id);        $this->assign('eventJS','product');        return $this->fetch();    }    //提交数据    public function postSize(){        $product_id=input('post.product_id');        $id=input('post.id');        $product=  ProductModel::get($product_id);        $postboo=true;        if(empty($id)){            //新增            $size=new Productsize();            $size->Size=input('post.Size');            $postboo=$product->productsize()->save($size);        }else{            //修改            $postboo=$product->productsize()->where('id','=',$id)->update(['Size'=>input('post.Size')]);        }        if($postboo){            cache('manumaterial-admin', null);            cache('productdata-admin', null);            echo true;        }else{            echo "提交失败，请重新保存！";        }    }        //同步数据    public function updata(){        $alldata=input();                $model=new ProductModel();        $nowproduct=$model->select();        //有的内容过滤掉        foreach ($nowproduct as $product) {            $product_id=$product->product_id;            if(isset($alldata['product'.$product_id])){                $size=$alldata['product'.$product_id]['SpecName'];                $savedata=$this->updataSize($product,$size);                if(count($savedata)>0)$this->saveNewSize($savedata,$product);                unset($alldata['product'.$product_id]);            }        }        cache('manumaterial-admin', null);        cache('productdata-admin', null);        return $this->saveNewProduct($alldata);    }    //保存新的产品    private function saveNewProduct($data){        foreach(array_reverse($data) as $value){            $model=new ProductModel();            $model->product_id=$value['ProdId'];            $model->name=$value['ProdName'];            $model->smallimg=$value['ImgPath'];            if($model->save()){                 $SpecName=$value['SpecName'];                 $sizes=array();                foreach($SpecName as $size){                    $sizes[]=array('Size'=>$size);                }                $model->productsize()->saveAll($sizes);            }        }        cache('manumaterial-admin', null);        cache('productdata-admin', null);        echo true;    }    //针对型号进行更新    private function updataSize($product,$size){        $saveSize=$size;        $editSize=array();        foreach($product->productsize as $sqlsize){            $sizeName=null;            foreach($size as $key=>$entskuSize){                if($sqlsize->Size==$entskuSize){                    $sizeName=$sqlsize->Size;                    unset($saveSize[$key]);                    break;                }            }            if(!isset($sizeName)){                $editSize[]=$sqlsize;            }        }                $saveSize=array_values($saveSize);        foreach(array_reverse($editSize) as $size){            if(count($saveSize)>0){                $size->Size=$saveSize[0];                unset($saveSize[0]);                $size->save();            }else{                $size->delete();            }        }        cache('manumaterial-admin', null);        cache('productdata-admin', null);        return $saveSize;    }    //保存新的Size内容    private function saveNewSize($size,$product){        $sizes=array();        foreach(array_reverse($size) as $newsize){            $sizes[]=array('Size'=>$newsize);        }        cache('manumaterial-admin', null);        cache('productdata-admin', null);        $product->productsize()->saveAll($sizes);    }    public function factory($id){        $productModel = new ProductModel();        $userinfoModel = new Userinfo();        $product = $productModel->where('id', '=', $id)->relation('productfactroy')->find()->toArray();        if (!empty($product['productfactroy'])) {            foreach ($product['productfactroy'] as $k => &$value) {                $userinfo_id = $value['id'];                $info = $userinfoModel->where('user_id', $userinfo_id)->find();                if (!empty($info['Name'])) {                    $value['user_name'] = $info['Name'];                } else {                    $value['user_name'] = '';                }            }        }        //多对多关联使用方法        /*        $user=$product->productfactroy;        foreach ($user as $role) {            echo $role->userinfo->Name;            // 获取中间表模型           dump($role->pivot);        }*/        $this->assign('data',$product);        $this->assign('eventJS','product');        return $this->fetch();    }    public function addFactory($type,$id,$urgent = 0){        $user=  User::scope('showfactory')->relation('userinfo')->order('id desc')->select();        $productModel = new ProductModel();        $product=  $productModel->where(['id' => $id])->relation('productfactroy,productfactroyHas')->find();        $factorys=$product['productfactroy'];        $printfids=array();        $fac = array();        foreach ($factorys as $factory) {            if($factory->pivot->working_type==$type){                $fac[$factory->pivot->factory_id]['fac_id'] = $factory->pivot->factory_id;                $fac[$factory->pivot->factory_id]['urgent']=$factory->pivot->urgent;                $printfids[$factory->pivot->factory_id]=$factory->pivot->factory_id;            }        }        $this->assign('urgent',$urgent);        $this->assign('product_id',$id);        $this->assign('factorys',$user);        $this->assign('fac',$fac);        $this->assign('printfactory',$printfids);        $this->assign('type',$type);        $this->assign('eventJS','product');        return $this->fetch();    }    //删除加工厂    public function deleteFactory(){        $deleteids=  explode(",",input('post.id'));        $factory=new Productfactory();        if($factory->where('id','in',$deleteids)->delete()){            cache('manumaterial-admin', null);            cache('productdata-admin', null);            echo true;        }else{            echo "删除失败，请重新删除";        }    }    //提交加工厂    public function postFactory($product_id){        $ids=input('post.ids');        $urgent = input('post.urgent');        $workingType=input("post.type");        $idarr=  explode(",",$ids);        $prevfactory=explode(',',input('post.printfactory'));        $result=array_intersect($prevfactory,$idarr);        $delete=array_diff($prevfactory,$result);        $add=array_diff($idarr,$result);        $factory=new Productfactory();        if(count($delete)>0)$factory->where('factory_id','in',$delete)->where('product_id','=',$product_id)->where('working_type','=',$workingType)->delete();        $addItem=array();        foreach ($add as $id){            $addItem[]=['product_id'=>$product_id,'factory_id'=>$id,'working_type'=>$workingType,'urgent'=>$urgent];        }        $boo=true;        if(count($addItem)>0)$boo=$factory->saveAll($addItem);        if($boo){            cache('manumaterial-admin', null);            cache('productdata-admin', null);            echo true;        }else{            echo "保存失败，请重新保存";        }    }}