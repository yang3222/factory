<?phpnamespace app\admin\controller;use \app\admin\controller;use \app\admin\model\Manufacture;use \app\admin\model\Product;use \app\admin\model\Material;use \app\admin\model\Manufacturelist;/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *//** * Description of Index * * @author 27532 */class Productlist extends Excel {    protected $pageTotalItem=100;    public function __construct() {        parent::__construct();        $this->assign('currentMenu',array('menu'=>'menu2','nav'=>'nav1'));    }    //生产单首页    public function index(){        $search=input('request.search','','trim');        $model=new Manufacture();        $modeldata=$model->order('id', 'desc');        if(!empty($search)){            $where=array(                'sku_code|name'=>['like',"%{$search}%"],            );            $modeldata->whereor($where);        }        $data=$modeldata->relation('product,productsize,userinfo')->paginate($this->pageTotalItem,false,['query' =>request()->param()])->each(            function($items, $key) {                $ManufacturelistModel = new Manufacturelist();                $materialModel = new material();                $matiems = $ManufacturelistModel->where('list_id', $items['id'])->select();                //Total cost                $money = 0;                if (count($matiems) > 0) {                    foreach ($matiems as $ks => $vs) {                        $mon = $materialModel->where('id', $vs['material_id'])->find();                        $tes = bcmul(floatval($vs['dosage']), floatval($vs['unit_conversion']), 3);                        $money += bcmul($tes, $mon['money'], 2);                        unset($mon);                        unset($tes);                    }                }                $print_hire_money = bcadd($items['print_money'], $items['hire_money'], 2);                $items['material_cost'] = $money;//材料费用                $items['all_cost'] = bcadd($money, $print_hire_money, 2);//总费用                unset($money,$print_hire_money);            }        );        $this->assign('data',$data);        $this->assign('pageDiv', $data->render());        $this->assign('eventJS','product');        $this->assign('search', $search);        return $this->fetch();    }    //修改生产单    public function edit($id, $search=""){        $ManufactureModel = new Manufacture();        $data =  $ManufactureModel->where('id', $id)->relation('product')->find();                $productSizes = \app\admin\model\Productsize::all(['product_id'=>$data['product_id']]);                $this->assign('productSizes',$productSizes);               $this->assign('data',$data);        $this->assign('eventJS','productlist');        $this->assign('search',$search);        return $this->fetch();    }    //添加生产单    public function add($product_id){        $product=Product::get($product_id);        $data=array('sku_code' => '','id'=>'','product_id'=>$product_id,'product'=>$product,'name'=>'','print_money'=>'','hire_money'=>'','profit_percent'=>'15','display'=>'1');                $productSizes = \app\admin\model\Productsize::all(['product_id'=>$product_id]);                $this->assign('productSizes',$productSizes);        $this->assign('data',$data);        $this->assign('search', '');        $this->assign('eventJS','productlist');        return $this->fetch('productlist/edit');    }    //删除内容    public function delete(){        $ids=input('post.ids/a');        $material=new Manufacture();        $boo=$material->destroy(function($query)use($ids){            $query->where('id','in',$ids);        });        if($boo){            cache('manumaterial-admin', null);            cache('productdata-admin', null);            echo true;        }else{            echo "删除失败，请重新删除！";        }    }    //材料列表    public function manufacture($list_id,$search=""){        $Manufacture=new Manufacturelist();        $data=$Manufacture->relation('material')->where('list_id','=',$list_id)->order('type', 'asc')->select();        $res = array();        $total_money = 0;        $materialModel = new material();        foreach ($data as $k => &$v) {            $mon = $materialModel->where('id', $v['material_id'])->find();            $tes = bcmul(floatval($v['dosage']), floatval($v['unit_conversion']), 3);            $total_money += bcmul($tes, $mon['money'], 2);            $v['dosage_money'] = bcmul($tes, $mon['money'], 2);            $res = $v;            unset($tes);            unset($v);        }        $this->assign('list',$data);        $this->assign('total_money',$total_money);        $this->assign('search',$search);        $this->assign('list_id',$list_id);        return $this->fetch();    }    //添加生产单的材料    public function addmanufacture($list_id,$type,$searchback=''){        $search=input('request.search','','trim');        $material=new Material();        $modeldata=$material->order('id', 'desc')->where('display','=','1');        if(!empty($search)){            $where=array(                'name' => ['like', "%{$search}%"],                'finance_num' => ['like', "%{$search}%"],                'warehouse_num' => ['like', "%{$search}%"],                'warehouse_num_prev' => ['like', "%{$search}%"],                'type' => ['like', "%{$search}%"],            );            $modeldata=$modeldata->where(function($query)use($where){                $query->whereor($where);            });        }        $data=$modeldata->paginate($this->pageTotalItem,false,['query' =>request()->param()]);        $this->assign('list_id',$list_id);        $this->assign('type',$type);        $this->assign('eventJS','productlist');        $this->assign('list',$data);        $this->assign('pageDiv', $data->render());        $this->assign('search',$searchback);        return $this->fetch();    }    //新增保存    public function manufactureadd(){        $manufacturelist=new Manufacturelist();        $ids=input('post.ids/a');        $list_id=input('post.list_id');        $type=input('post.type');        $data=array();        foreach($ids as $value){            $data[]=array('list_id'=>$list_id,'material_id'=>$value,'type'=>$type,'create_time'=>date('y-m-d h:i:s'));        }        $boo=$manufacturelist->saveAll($data);        if($boo!==false){            cache('manumaterial-admin', null);            cache('productdata-admin', null);            echo true;        }else{            echo "添加失败，请重新添加！";        }    }    //删除材料清单    public function deletemanufacture(){        $ids=input('post.ids/a');        $material=new Manufacturelist();        $boo=$material->destroy(function($query)use($ids){            $query->where('id','in',$ids);        });        if($boo){            cache('manumaterial-admin', null);            cache('productdata-admin', null);            echo true;        }else{            echo "删除失败，请重新删除！";        }    }    //修改材料内容    public function editmanfacture($id,$search=""){        $manufactureModel = new Manufacturelist();        $data = $manufactureModel->relation('material,manufacture')->where('id', $id)->find();        $this->assign('data',$data);        $this->assign('eventJS','productlist');        $this->assign('search',$search);        return $this->fetch();    }    public function savemanfacture(){        $id=input('post.id');        $data=  Manufacturelist::get($id);        $data->dosage=input('post.dosage');        $data->loss=input('post.loss');        $data->unit_conversion=input('post.unit_conversion');        if(!empty(input('post.print_size')))$data->print_size=input('post.print_size');        $boo=$data->save();        if($boo!==false){            cache('manumaterial-admin', null);            cache('productdata-admin', null);            echo true;        }else{            echo "保存失败，请重新保存！";        }    }    //保存生产单信息    public function savelist(){        $id=input('post.id');         if(!empty($id)){            $manufacture=  Manufacture::get($id);        }else{            $manufacture=new Manufacture();            $manufacture->create_time=date('y-m-d h:i:s');        }                $manufacture->size_id=  input('post.size_id');        $manufacture->product_id=  input('post.product_id');        $manufacture->name=  input('post.name','','trim');        $manufacture->sku_code=  input('post.sku_code','','trim');        $manufacture->print_money=  input('post.print_money','','trim');        $manufacture->hire_money=  input('post.hire_money','','trim');        $manufacture->profit_percent=  input('post.profit_percent','','trim');        $manufacture->display=  input('post.display');        $manufacture->user_id=session('admin_id');        if($manufacture->save()!==false){            $success="1";            $tip="保存成功";        }else{            $success="0";            $tip="保存失败，请重新保存！";        }        $jsondata=array('success'=>$success,'tip'=>$tip,'id'=>$manufacture->id);        cache('manumaterial-admin', null);        cache('productdata-admin', null);        return json($jsondata);    }    //通过sku查漏缺少的sku    public function checkSku() {        $this->view->engine->layout(false);        if ($this->request->isPost()) {            $this->view->engine->layout(false);            $url = 'http://webapi.38420.com/api/Order/ProList';            //$html = file_get_contents($url);            $ch = curl_init();            curl_setopt($ch, CURLOPT_URL,$url);//抓取指定网页            curl_setopt($ch, CURLOPT_HEADER, 0);//设置header            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);//要求结果为字符串且输出到屏幕上            curl_setopt($ch, CURLOPT_POST, 1);//post提交方式            curl_setopt($ch, CURLOPT_POSTFIELDS, $url);            $result = curl_exec($ch);            curl_close($ch);            $result = json_decode($result, true);            $ManufactureModel = new Manufacture();            $sku = $ManufactureModel->field('sku_code')->select();            //$sku = array_column($sku, 'sku_code');            $sku_arr = array();            foreach ($sku as $k => $v) {                if (!empty($v['sku_code'])) $sku_arr[] = $v['sku_code'];            }            //$sku_arr[] = 'p386c421s791';            $res_sku = array();            foreach ($result as $key => $val) {                if (!in_array($val, $sku_arr)) $res_sku[] = $val;            }            //array_diff()对比 array1 和其他一个或者多个数组，返回在 array1 中但是不在其他 array 里的值。            //$diff_sku = array_diff($result, $sku);            if (count($res_sku) > 0) {                $str = implode(',', $res_sku);                $str = str_replace(',', "\n", $str);                $this->assign('data', $str);/*'缺漏sku：' . "\n" . */                return $this->fetch();                //return json(['data' => $res_sku]);            } else {                $this->assign('data','无缺漏');                return $this->fetch();                //return json(['data' => array()]);            }        } else {            return json();        }    }    //导出生产单数据    public function exportprolist() {        parent::excelStart();        $ManufactureModel = new Manufacture();        $manu_data = $ManufactureModel->relation('product,productsize,userinfo')->select();        $data = array();        foreach ($manu_data as $key => $val) {            $ManufacturelistModel = new Manufacturelist();            $materialModel = new material();            $matiems = $ManufacturelistModel->where('list_id', $val['id'])->select();            //Total cost            $money = 0;            if (count($matiems) > 0) {                foreach ($matiems as $ks => $vs) {                    $mon = $materialModel->where('id', $vs['material_id'])->find();                    $tes = bcmul(floatval($vs['dosage']), floatval($vs['unit_conversion']), 3);                    $money += bcmul($tes, $mon['money'], 2);                    unset($mon);                    unset($tes);                }            }            $print_hire_money = bcadd($val['print_money'], $val['hire_money'], 2);            $val['material_cost'] = $money;//材料费用            $val['all_cost'] = bcadd($money, $print_hire_money, 2);//总费用            unset($money,$print_hire_money);            $data[] = $val;        }        if (empty($data)) {            exit;        }        $PHPExcel = new \PHPExcel();        $PHPExcel->setActiveSheetIndex(0)            ->setCellValue("A1", "名称")            ->setCellValue("B1", "sku编码")            ->setCellValue("C1", "型号")            ->setCellValue("D1", "印花（￥）")            ->setCellValue("E1", "加工费（￥）")            ->setCellValue("F1", "利润率（%）")            ->setCellValue("G1", "材料费用（￥）")            ->setCellValue("H1", "总费用（￥）")        ;        $PHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(20);        $PHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);        $PHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);        $PHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(12);        $PHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(12);        $PHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(12);        $PHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12);        $PHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(12);        $PHPExcel->getActiveSheet()->getStyle('A')->getNumberFormat()->setFormatCode(\PHPExcel_Style_NumberFormat::FORMAT_TEXT);        $PHPExcel->getActiveSheet()->getStyle('B')->getNumberFormat()->setFormatCode(\PHPExcel_Style_NumberFormat::FORMAT_TEXT);        $PHPExcel->getActiveSheet()->getStyle('C')->getNumberFormat()->setFormatCode(\PHPExcel_Style_NumberFormat::FORMAT_TEXT);        $PHPExcel->getActiveSheet()->getStyle('D')->getNumberFormat()->setFormatCode(\PHPExcel_Style_NumberFormat::FORMAT_TEXT);        $PHPExcel->getActiveSheet()->getStyle('E')->getNumberFormat()->setFormatCode(\PHPExcel_Style_NumberFormat::FORMAT_TEXT);        $PHPExcel->getActiveSheet()->getStyle('F')->getNumberFormat()->setFormatCode(\PHPExcel_Style_NumberFormat::FORMAT_TEXT);        $PHPExcel->getActiveSheet()->getStyle('G')->getNumberFormat()->setFormatCode(\PHPExcel_Style_NumberFormat::FORMAT_TEXT);        $PHPExcel->getActiveSheet()->getStyle('H')->getNumberFormat()->setFormatCode(\PHPExcel_Style_NumberFormat::FORMAT_TEXT);        foreach ($data as $k => $v) {            //$manuat = '';            $ks = $k + 2;            //$manuat = $manuat . '[' . $val['material']['finance_num'] .']' .$val['material']['name'] . ': ' . $val['dosage'] . $val['material']['company'] . "\n";            $PHPExcel->setActiveSheetIndex(0)                ->setCellValue("A" . $ks, $v['name'])                ->setCellValue("B" . $ks, $v['sku_code'])                ->setCellValue("C" . $ks, $v['productsize']['Size'])                ->setCellValue("D" . $ks, (float)$v['print_money'])                ->setCellValue("E" . $ks, (float)$v['hire_money'])                ->setCellValue("F" . $ks, (float)$v['profit_percent'])                ->setCellValue("G" . $ks, (float)$v['material_cost'])                ->setCellValue("H" . $ks, (float)$v['all_cost']);// . "\t"            //$rowHeight = 15;            //if (count($v['manumaterial']) > 0) $rowHeight = count($v['manumaterial']) * 15;            //$PHPExcel->getActiveSheet()->getRowDimension($ks)->setRowHeight($rowHeight);        }        $PHPExcel->setActiveSheetIndex(0);                   //设置sheet的起始位置        //$objWriter = \PHPExcel_IOFactory::createWriter($PHPExcel, 'Excel5');   //Excel2003通过PHPExcel_IOFactory的写函数将上面数据写出来        $PHPWriter = \PHPExcel_IOFactory::createWriter($PHPExcel,"Excel2007"); //Excel2007        //header('Content-Disposition: attachment;filename="用户信息.xlsx"');        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');        header("Content-Disposition:inline;filename=生产单数据.xlsx");        //$savefiles = ROOT_SAVE_FILES . '运单.xlsx';        $PHPWriter->save('php://output'); //表示在$path路径下面生成demo.xlsx文件        exit;    }}